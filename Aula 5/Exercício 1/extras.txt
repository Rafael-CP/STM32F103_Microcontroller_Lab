;========= EXERCICIO 1A ========= DO INCÍCIO
		EXPORT 	__main
					
dist	EQU		vt2-vt1

		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	16		
vt2		space	16	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1		;recebe endereço de vt1
		MOV		R8, #16		;contador
		
LOOP	LDRSB	R1,[R0]		;carrega o conteudo de r0 em r1 (dados de vt1)
		STRB	R1,[R0,#dist];armazena o conteudo de r1 em r0 deslocado de 16 espaços
		ADD		R0,#1		;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1		;subtrai para o contador
		BNE		LOOP
		B		__main
		END
		
;========= EXERCICIO 1A ========= DO FINAL
		EXPORT 	__main
					
dist	EQU		vt2-vt1

		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	16		
vt2		space	16	

	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1+7	;recebe endereço de vt1 deslocado em 7 para pegar o ultimo elemento
		MOV		R8, #16		;contador
		
LOOP	LDRSB	R1,[R0]		;carrega o conteudo de r0 em r1 (dados de vt1)
		STRB	R1,[R0,#8] 	;armazena o conteudo de r1 em r0 deslocado de 16 espaços
		SUB		R0,#1		;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1		;subtrai para o contador
		BNE		LOOP
		B		__main
		END

;========= EXERCICIO 1B ========= DO INÍCIO
		EXPORT 	__main
			
dist	EQU		vt2-vt1
	
		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	16		
vt2		space	16	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1		;recebe endereço de vt1
		MOV		R8, #8		;contador
		
LOOP	LDRSH	R1,[R0]		;carrega o conteudo de r0 em r1 (dados de vt1)
		STRH	R1,[R0,#dist];armazena o conteudo de r1 em r0 deslocado de 16 espaços
		ADD		R0,#2		;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1		;subtrai para o contador
		BNE		LOOP
		B		__main
		END

;========= EXERCICIO 1B ========= DO FINAL
		EXPORT 	__main
			
dist	EQU		vt2-vt1
	
		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	16		
vt2		space	16	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1+14	;recebe endereço de vt1 + 14 para o ultimo elemento do vetor
		MOV		R8, #8		;contador
		
LOOP	LDRSH	R1,[R0]		;carrega o conteudo de r0 em r1 (dados de vt1)
		STRH	R1,[R0,#16];armazena o conteudo de r1 em r0 deslocado de 16 espaços
		SUB		R0,#2		;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1		;subtrai para o contador
		BNE		LOOP
		B		__main
		END
		
;========= EXERCICIO 1C ========= DO INÍCIO
		EXPORT 	__main
			
dist	EQU		vt2-vt1
	
		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	32		
vt2		space	32	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1		;recebe endereço de vt1
		MOV		R8, #8		;contador
		
LOOP	LDR		R1,[R0]		;carrega o conteudo de r0 em r1 (dados de vt1)
		STR		R1,[R0,#dist];armazena o conteudo de r1 em r0 deslocado de 16 espaços
		ADD		R0,#4		;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1		;subtrai para o contador
		BNE		LOOP
		B		__main
		END
		
;========= EXERCICIO 1C ========= DO FINAL
		EXPORT 	__main
			
dist	EQU		vt2-vt1
	
		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	32		
vt2		space	32	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1+28		;recebe endereço de vt1 deslocado em 28 para pegar o ultimo elemento
		MOV		R8, #8			;contador
		
LOOP	LDR		R1,[R0]			;carrega o conteudo de r0 em r1 (dados de vt1)
		STR		R1,[R0,#32]		;armazena o conteudo de r1 em r0 deslocado de 16 espaços
		SUB		R0,#4			;caminha em r0 para pegar prox elemento de vt1
		SUBS	R8,#1			;subtrai para o contador
		BNE		LOOP
		B		__main
		
;========= EXERCICIO 1C ========= DO FINAL E ESPELHADO
		EXPORT 	__main
			
dist	EQU		vt2-vt1
	
		AREA 	M_DADOS, DATA,	READWRITE		
vt1		space	32		
vt2		space	32	
	
		AREA 	M_PROGRAMA, CODE, READONLY
__main	
		LDR		R0,=vt1+28		;recebe endereço de vt1 deslocado em 28 para pegar o ultimo elemento
		MOV		R8, #8			;contador
		LDR		R7,=vt2
		
LOOP	LDR		R1,[R0]			;carrega o conteudo de r0 em r1 (dados de vt1)
		STR		R1,[R7]		;armazena o conteudo de r1 em r0 deslocado de 16 espaços
		SUB		R0,#4			;caminha em r0 para pegar prox elemento de vt1
		ADD		R7,#4
		SUBS	R8,#1			;subtrai para o contador
		BNE		LOOP
		B		__main
		END		
		